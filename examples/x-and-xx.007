@tighter(infix:<~>)
macro infix:<xx>(left, right) {
    return quasi {
        (^{{{right}}}).flatMap(func(_) { {{{left}}} })
    }
}

@equiv(infix:<xx>)
func infix:<x>(left, right) {
    return (left xx right).join("");
}

# Test string x number.
say("testing" x 2);

# Test number xx number.
my i = 0;
say((i = i + 1) xx 3);

# Test list xx number.
say([1, 2, 3] xx 2);

# Test (list or number) xx number.
my j = 0;
say((j = [1, [1, 2, 3]][j && 1]) xx 2);

# Precedence of x should be looser than +
say(2 + 2 x 5);
